// DOM element references for form buttons and fields
let buttonup = document.getElementById("buttonUp");
let buttonin = document.getElementById("buttonIn");
let title = document.getElementById("title");
let namefield = document.getElementById("nameField");
let passfield = document.getElementById("pass");
let emailField = document.querySelector('input[type="email"]');
let passwordField = document.querySelector('input[type="password"]');

let forgotLink = document.getElementById("forgotLink");

forgotLink.onclick = function(e) {
    // Prevent the default link behavior to avoid page navigation
    e.preventDefault();
    // Prompt the user to input their email address for password retrieval
    let email = prompt("Enter your email to retrieve password:");
    // If the user cancels the prompt or enters nothing, exit the function
    if (!email) return;
    // Validate the entered email using the validateEmail function
    if (!validateEmail(email)) {
        alert("Please enter a valid email.");
        return;
    }
    // Retrieve the list of registered users from localStorage
    let users = JSON.parse(localStorage.getItem('users')) || [];
    // Search for a user with the provided email address
    let user = users.find(u => u.email === email);
    if (user) {
        // If the user is found, display their password in an alert
        alert("Your password is: " + user.password);
    } else {
        // If no user with that email exists, show an error message
        alert("Email not registered.");
    }
};

// Initially hide the password field for sign-up mode
passfield.parentElement.style.maxHeight = "0px";

// Function to generate a random password using GenratrAPI
async function generatePassword(length = 12) {
    // Try to generate password from external API first
    try {
        // Construct the API URL with parameters for password generation
        // Includes length, and options for symbols, numbers, lowercase, uppercase, etc.
        const url = `https://passwordinator.onrender.com/?length=${length}&symbols=true&numbers=true&lowercase=true&uppercase=true&excludeSimilarCharacters=false&exclude=`;
        // Make an asynchronous HTTP request to the password generation API
        const response = await fetch(url);
        // Check if the HTTP response is successful (status 200-299)
        if (!response.ok) {
            // Throw an error if the API request failed
            throw new Error('API request failed');
        }
        // Extract the password as plain text from the response
        const password = await response.text();
        // Return the password generated by the API
        return password;
    } catch (error) {
        // Log the error to the console if the API call fails
        console.error('Password generation failed:', error);
        // Fallback to local password generation if API is unavailable
        // Define the character set including uppercase, lowercase, numbers, and symbols
        const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-';
        let fallbackPassword = '';
        // Loop to build the password character by character
        for (let i = 0; i < length; i++) {
            // Randomly select a character from the charset
            fallbackPassword += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        // Return the locally generated fallback password
        return fallbackPassword;
    }
}

// Event handler for sign-in button click
buttonin.onclick = function(){
    // Check if the current form mode is not "Sign In"
    if (title.innerHTML !== "Sign In") {
        // Hide the name input field by setting its container's max height to 0
        namefield.parentElement.style.maxHeight = "0px";
        // Show the password input field by setting its container's max height to 65px
        passfield.parentElement.style.maxHeight = "65px";
        // Update the form title to "Sign In"
        title.innerHTML = "Sign In";
        // Enable the sign-in button and disable the sign-up button
        buttonin.classList.remove('disable');
        buttonup.classList.add('disable');
    } else {
        // If already in sign-in mode, perform the sign-in logic
        // Retrieve and trim the email and password from input fields
        let email = emailField.value.trim();
        let password = passwordField.value.trim();
        // Validate that both email and password are provided
        if (!email || !password) {
            alert("Please fill in all fields.");
            return;
        }
        // Load the list of registered users from localStorage, defaulting to an empty array
        let users = JSON.parse(localStorage.getItem('users')) || [];
        // Search for a user with matching email and password
        let user = users.find(u => u.email === email && u.password === password);
        if (user) {
            // If user found, store the current user in localStorage for session management
            localStorage.setItem('currentUser', JSON.stringify(user));
            // Redirect to the user details page
            window.location.href = 'user-details.html';
        } else {
            // If no matching user, show an error message
            alert("Invalid email or password.");
        }
    }
}

// Event handler for sign-up button click
buttonup.onclick = async function(){
    // Check if the current form mode is not "Create an account"
    if (title.innerHTML !== "Create an account") {
        // Show the name input field by setting its container's max height to 65px
        namefield.parentElement.style.maxHeight = "65px";
        // Hide the password input field by setting its container's max height to 0
        passfield.parentElement.style.maxHeight = "0px";
        // Update the form title to "Create an account"
        title.innerHTML = "Create an account";
        // Disable the sign-in button and enable the sign-up button
        buttonin.classList.add('disable');
        buttonup.classList.remove('disable');
    } else {
        // If already in sign-up mode, perform the sign-up logic
        // Retrieve and trim the name and email from input fields
        let name = namefield.value.trim();
        let email = emailField.value.trim();
        // Validate that both name and email are provided
        if (!name || !email) {
            alert("Please fill in all fields.");
            return;
        }
        // Validate the email format using the validateEmail function
        if (!validateEmail(email)) {
            alert("Please enter a valid email.");
            return;
        }
        // Load the list of registered users from localStorage
        let users = JSON.parse(localStorage.getItem('users')) || [];
        // Check if a user with the same email already exists
        let existingUser = users.find(user => user.email === email);
        if (existingUser) {
            alert("Email already registered. Please sign in.");
            return;
        }
        // Generate a random password using the generatePassword function
        let password = await generatePassword();
        // Add the new user to the users array
        users.push({ name, email, password });
        // Save the updated users list back to localStorage
        localStorage.setItem('users', JSON.stringify(users));
        // Show success message with the generated password
        alert("Account created successfully! Your generated password is: " + password + ". Please remember it for sign-in.");
        // Automatically switch to sign-in mode by triggering the sign-in button click
        buttonin.click();
    }
}

// Function to validate email format using regex
function validateEmail(email) {
    // Define a regular expression pattern for basic email validation
    // It checks for characters before '@', then domain, then '.' and more characters
    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    // Test the provided email string against the regex and return the result
    return re.test(email);
}
